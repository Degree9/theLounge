(ns lounge.firebase
  (:refer-clojure :exclude [deref])
  (:require [cljsjs.firebase]
            [clojure.string :as s]
            [firebase-cljs.core :as fb]
            [firebase-cljs.auth :as fbauth]
            [firebase-cljs.auth.provider :as fbprov]
            [firebase-cljs.user :as fbuser]
            [firebase-cljs.database :as fbdb]
            [firebase-cljs.database.datasnapshot :as fbsnap]))

(fb/init
  {:apiKey "AIzaSyDM4PxqWi4JvtvdnlVvZSbQ78ugYH-t89Q"
   :authDomain "d9lounge.firebaseapp.com"
   :databaseURL "https://d9lounge.firebaseio.com"
   :storageBucket "firebase-d9lounge.appspot.com"})

(def app (fb/get-app))

(def auth (fb/get-auth))

(def db (fb/get-db))

(def auth-provider (fbprov/google))

(def auth-changed fbauth/auth-changed)

(fbprov/scope-email auth-provider :google)

(fbprov/scope-profile auth-provider :google)

(defn fb->clj [fb]
  (-> fb fbsnap/get-value (js->clj :keywordize-keys true)))

(defn users
  ([] (fbdb/get-in db [:users]))
  ([child] (fbdb/get-in (users) child))
  ([child korks] (fbdb/get-in (users child) korks)))

(defn roles
  ([] (fbdb/get-in db [:roles]))
  ([child] (fbdb/get-in (roles) child))
  ([child korks] (fbdb/get-in (roles child) korks)))

(defn tenants
  ([] (fbdb/get-in db [:tenants]))
  ([tenant] (fbdb/get-in (tenants) tenant))
  ([tenant korks] (fbdb/get-in (tenants tenant) korks)))

(defn notify
  ([] (fbdb/get-in db [:notifications]))
  ([id] (fbdb/get-in (notify) id))
  ([id korks] (fbdb/get-in (notify id) korks)))

(defn directory
  ([] (fbdb/get-in db [:directory]))
  ([d] (fbdb/get-in (directory) d))
  ([d korks] (fbdb/get-in (directory d) korks)))

(defn listen-val
  ([fbref state] (fbdb/listen fbref "value" #(reset! state (fb->clj %))))
  ([fbref korks state] (fbdb/listen fbref korks #(reset! state (fb->clj %))))
  ([fbref korks state failure] (fbdb/listen fbref korks #(reset! state (fb->clj %)) failure)))




(defn login! []
  (fbauth/login-popup auth auth-provider))

(defn logout! []
  (fbauth/logout auth))

(defn update-user! [uid udat]
  (fbdb/merge! (users uid) (dissoc udat :uid)))

(defn update-directory! [korks val]
  (fbdb/reset! (-> db
                   (fbdb/get-in [:directory])
                   (fbdb/get-in korks)) val))

;(defn updateToken! [id tdat]
;  (-> (getToken id)
;      (.update (clj->js tdat))))

