(ns materialon.grid
  (:refer-hoplon :exclude [col cell])
  (:require [materialon.core :as core]))

(defelem mdl-grid [attr children]
  (let [attr (core/prepend-class attr "mdl-grid")
        attr     (if (or (:no-spacing attr) nil)
                   (core/append-class attr ["mdl-grid--no-spacing"])
                   attr)
        attr     (dissoc attr :no-spacing)]
    (div attr children)))

(defelem grid-cell [attr & children]
  (let [attr (core/prepend-class attr "mdl-cell")
        attr (cond-> attr
                     (or (:size attr) nil)         (core/append-class [(clojure.string/join ["mdl-cell--" (:size attr) "-col"])])
                     (or (:size-desktop attr) nil) (core/append-class [(clojure.string/join ["mdl-cell--" (:size attr) "-col-desktop"])])
                     (or (:size-tablet attr) nil)  (core/append-class [(clojure.string/join ["mdl-cell--" (:size attr) "-col-tablet"])])
                     (or (:size-phone attr) nil)   (core/append-class [(clojure.string/join ["mdl-cell--" (:size attr) "-col-phone"])])
                     (or (:hide-desktop attr) nil) (core/append-class ["mdl-cell--hide-desktop"])
                     (or (:hide-tablet attr) nil)  (core/append-class ["mdl-cell--hide-tablet"])
                     (or (:hide-phone attr) nil)   (core/append-class ["mdl-cell--hide-phone"])
                     (or (:stretch attr) nil)      (core/append-class ["mdl-cell--stretch"])
                     (or (:top attr) nil)          (core/append-class ["mdl-cell--top"])
                     (or (:middle attr) nil)       (core/append-class ["mdl-cell--middle"])
                     (or (:bottom attr) nil)       (core/append-class ["mdl-cell--bottom"]))
        attr (dissoc attr :size :size-desktop :size-tablet :size-phone)]
    (div attr children)))
