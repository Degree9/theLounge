(ns materialon.grid
  (:refer-hoplon :exclude [col])
  (:require [materialon.core :as core]))

(defelem row [attr children]
  (let [attr (core/prepend-class attr "row")]
    (div attr children)))

(defelem col [attr children]
  (let [attr   (core/prepend-class attr "col")
        size   (cond (string? (:size attr))
                     [(:size attr)]
                     (vector? (:size attr))
                     (:size attr)
                     :else nil)
        offset (if (contains? attr :offset)
                 (clojure.string/join ["offset-" (:offset attr)])
                 nil)
        clist  (conj size offset)
        attr   (core/append-class attr clist)
        attr   (dissoc attr :size :offset)]
    (div attr children)))

(defelem col-s12 [attr children]
  (let [attr (assoc attr :size "s12")]
    (col attr children)))

(defelem col-s11 [attr children]
  (let [attr (assoc attr :size "s11")]
    (col attr children)))

(defelem col-s10 [attr children]
  (let [attr (assoc attr :size "s10")]
    (col attr children)))

(defelem col-s9 [attr children]
  (let [attr (assoc attr :size "s9")]
    (col attr children)))

(defelem col-s8 [attr children]
  (let [attr (assoc attr :size "s8")]
    (col attr children)))

(defelem col-s7 [attr children]
  (let [attr (assoc attr :size "s7")]
    (col attr children)))

(defelem col-s6 [attr children]
  (let [attr (assoc attr :size "s6")]
    (col attr children)))

(defelem col-s5 [attr children]
  (let [attr (assoc attr :size "s5")]
    (col attr children)))

(defelem col-s4 [attr children]
  (let [attr (assoc attr :size "s4")]
    (col attr children)))

(defelem col-s3 [attr children]
  (let [attr (assoc attr :size "s3")]
    (col attr children)))

(defelem col-s2 [attr children]
  (let [attr (assoc attr :size "s2")]
    (col attr children)))

(defelem col-s1 [attr children]
  (let [attr (assoc attr :size "s1")]
    (col attr children)))

(defelem col-s12-l6 [attr children]
  (let [attr (assoc attr :size ["s12" "l6"])]
    (col attr children)))

(defelem col-s12-l3 [attr children]
  (let [attr (assoc attr :size ["s12" "l3"])]
    (col attr children)))

(defelem col-s12-m6 [attr children]
  (let [attr (assoc attr :size ["s12" "m6"])]
    (col attr children)))

(defelem col-s12-m4 [attr children]
  (let [attr (assoc attr :size ["s12" "m4"])]
    (col attr children)))

(defelem col-s12-m6-l3 [attr children]
  (let [attr (assoc attr :size ["s12" "m6" "l3"])]
    (col attr children)))

(defelem col-s12-m4-l8 [attr children]
  (let [attr (assoc attr :size ["s12" "m4" "l8"])]
    (col attr children)))

(defelem col-s12-m4-l3 [attr children]
  (let [attr (assoc attr :size ["s12" "m4" "l3"])]
    (col attr children)))

(defelem col-s12-m4-l2 [attr children]
  (let [attr (assoc attr :size ["s12" "m4" "l2"])]
    (col attr children)))
