(ns materialon.layout
  (:refer-hoplon :exclude [section title])
  (:require [materialon.core :as core]))

(defelem layout [attr & children]
  (let [attr     (core/prepend-class attr ["mdl-layout" "mdl-js-layout"])
        header   (or (:header attr)  nil)
        content  (or (:content attr) nil)
        drawer   (or (:drawer attr)  nil)
        attr     (if (or (:fixed-drawer attr) nil)
                   (core/append-class attr ["mdl-layout--fixed-drawer"])
                   attr)
        attr     (if (or (:fixed-header attr) nil)
                   (core/append-class attr ["mdl-layout--fixed-header"])
                   attr)
        attr     (dissoc attr :header :content :drawer :fixed-drawer :fixed-header)
        children (into [header drawer content] children)]
    (div attr children)))

(defelem icon [attr children]
  (let [attr (core/prepend-class attr ["mdl-layout-icon"])]
    (div attr children)))

(defelem title [attr children]
  (let [attr (core/prepend-class attr ["mdl-layout-title"])]
    (span attr children)))

(defelem spacer [attr children]
  (let [attr (core/prepend-class attr ["mdl-layout-spacer"])]
    (div attr children)))

(defelem layout-header-row [attr children]
  (let [attr     (core/prepend-class attr ["mdl-layout__header-row"])
        title    (or (:title attr)  nil)
        nav      (or (:navigation attr)  nil)
        attr     (dissoc attr :title :navigation)
        children (into [title (spacer) nav] children )]
    (div attr children)))

(defelem layout-header [attr children]
  (let [attr     (core/prepend-class attr ["mdl-layout__header"])
        icon     (or (:icon attr)  nil)
        title    (or (:title attr)  nil)
        nav      (or (:navigation attr) nil)
        attr     (if (or (:scroll attr) nil)
                   (core/append-class attr ["mdl-layout__header--scroll"])
                   attr)
        attr     (if (or (:waterfall attr) nil)
                   (core/append-class attr ["mdl-layout__header--waterfall"])
                   attr)
        attr     (if (or (:transparent attr) nil)
                   (core/append-class attr ["mdl-layout__header--transparent"])
                   attr)
        attr     (dissoc attr :icon :title :navigation :scroll :waterfall)
        children [icon (layout-header-row {:title title :navigation nav} (into [] children))]]
    (header attr children)))

(defelem drawer [attr & children]
  (let [attr (core/prepend-class attr ["mdl-layout__drawer"])
        title    (or (:title attr)  nil)
        nav      (or (:navigation attr)  nil)
        attr     (if (or (:fixed attr) nil)
                   (core/append-class attr ["mdl-layout--fixed-drawer"])
                   attr)
        attr     (dissoc attr :title :navigation)
        children (into [title nav] children)]
    (div attr children)))

(defelem content [attr children]
  (let [attr (core/prepend-class attr ["mdl-layout__content"])]
    (main attr children)))

(defelem navigation [attr & children]
  (let [attr (core/prepend-class attr ["mdl-navigation"])
        links    (or (:links attr)  nil)
        attr     (dissoc attr :links)
        children (into [links] children)]
    (nav attr children)))

(defelem navigation-link [attr & children]
  (let [attr (core/prepend-class attr ["mdl-navigation__link"])]
    (a attr children)))

(defelem mini-footer [attr & children]
  (let [attr     (core/prepend-class attr ["mdl-mini-footer"])
        leftsec  (or (:left-section attr)  nil)
        rightsec (or (:right-section attr)  nil)
        attr     (dissoc attr :left-section)
        children (into [leftsec rightsec children] children)]
    (footer attr children)))

(defelem mini-footer-leftsec [attr children]
  (let [attr     (core/prepend-class attr ["mdl-mini-footer__left-section"])
        title  (or (:title attr)  nil)
        ulist  (or (:list attr)  nil)
        ]
    (div attr [(div :class "mdl-logo") children])))

(defelem mini-footer-rightsec [attr children]
  (let [attr     (core/prepend-class attr ["mdl-mini-footer__right-section"])
        title  (or (:title attr)  nil)
        ulist  (or (:list attr)  nil)
        ]
    (div attr [(div :class "mdl-logo") children])))

