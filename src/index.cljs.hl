(page "index.html"
      (:refer-clojure :exclude [deref])
      (:require [lounge.ui :as ui]
                [lounge.forms :as forms]
                [lounge.landing :as landing]
                [lounge.dash :as dash]
                [semantic-ui.core :as semui]
                [semantic-ui.elements.container :as semcont]
                [semantic-ui.elements.step :as semstep]
                [semantic-ui.elements.segment :as semseg]
                [semantic-ui.collections.menu :as semmenu]
                [semantic-ui.collections.grid :as semgrid]
                [semantic-ui.behaviors.form]
                [lounge.firebase :as fb]
                [lounge.route :as route]
                [lounge.logging :as log]
                [goog.dom]
                [cljsjs.typedjs]
                [cljsjs.scrollify]
                [cljs.pprint :as p]
                [matchbox.core :as mbox]
                [matchbox.registry :as mreg]
                [promesa.core :as prom]
                [matchbox.promise :as mprom]
                [matchbox.protocols :as proto]
                [cljs.analyzer])
      ;(:require-macros [matchbox.promise :refer []])
      )

(fb/connect! "https://d9lounge.firebaseio.com")

(html
  (head
    (html-meta :charset "utf-8")
    (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1")

    (title "theLounge.io - IT Automation")
    (link :rel "stylesheet" :type "text/css" :href "bower_components/semantic-ui/dist/semantic.css")
    (link :rel "stylesheet" :href "bower_components/animate-css/animate.css")
    (script :src "https://checkout.stripe.com/checkout.js")
    (style "
             .banner.segment {
             min-height: 700px;
             padding: 1em 0em;
             }
             .banner .logo.item img {
             margin-right: 1em;
             }
             .banner .ui.menu .ui.button {
             margin-left: 0.5em;
             }
             .banner h1.ui.header {
             margin-top: 3em;
             margin-bottom: 0em;
             font-size: 4em;
             font-weight: normal;
             }
             .banner h2 {
             font-size: 1.7em;
             font-weight: normal;
             }

             .vertical.stripe {
             padding: 8em 0em;
             }
             .vertical.stripe h3 {
             font-size: 2em;
             }
             .vertical.stripe .button + h3,
             .vertical.stripe p + h3 {
             margin-top: 3em;
             }
             .vertical.stripe .floated.image {
             clear: both;
             }
             .vertical.stripe p {
             font-size: 1.33em;
             }
             .vertical.stripe .horizontal.divider {
             margin: 3em 0em;
             }

             .last.container {
             margin-bottom: 300px !important;
             }
             .ui.center.header img{
             margin: 6em 0em 2em;
             }
             //#register, .ui.center.header img{
             //margin: -4em 0em 2em;
             //}
             #dash, .centered a > img{
             margin-top: 6em;
             }
             h3.ui.center.header {
             padding: 2em 0em;}

             .typed-cursor{
             opacity: 1;
             -webkit-animation: blink 0.7s infinite;
             -moz-animation: blink 0.7s infinite;
             animation: blink 0.7s infinite;
             }
             @keyframes blink{
             0% { opacity:1; }
             50% { opacity:0; }
             100% { opacity:1; }
             }
             @-webkit-keyframes blink{
             0% { opacity:1; }
             50% { opacity:0; }
             100% { opacity:1; }
             }
             @-moz-keyframes blink{
             0% { opacity:1; }
             50% { opacity:0; }
             100% { opacity:1; }
             }
          "))
    (body
      (landing/landing)
      (dash/dash)))

(.typed (js/jQuery "#hype")
        (clj->js {:strings ["but simple!" "automated!" "self-managed!" "for real people."]
                  :typeSpeed 50 :startDelay 500 :backSpeed 30 :backDelay 500}))

(forms/validate)

(defc teststate nil)
(cell= (prn teststate))
(mbox/deref (mbox/get-in (fb/tenants) [:demo]) teststate identity)

;(-> (mprom/promise (fb/tenants :demo2))
    ;(mprom/then mprom/-val)
;    (mprom/catch prn)
;    )
;(promise-> (fb/users :demo) prn :catch prn )

;(.catch (.then (.once (fb/tenants :demo2) "value") prn) prn)
