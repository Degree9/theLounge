(page "dash.html"
      (:require [lounge.ui :as ui]
                [lounge.forms :as forms]
                [lounge.landing :as landing]
                [lounge.dash :as dash]
                [semantic-ui.core :as semui]
                [semantic-ui.elements.container :as semcont]
                [semantic-ui.elements.step :as semstep]
                [semantic-ui.elements.segment :as semseg]
                [semantic-ui.collections.menu :as semmenu]
                [semantic-ui.collections.grid :as semgrid]
                [semantic-ui.behaviors.form]
                [lounge.auth :as auth]
                [lounge.firebase :as fb]
                [lounge.user :as user]
                [lounge.tenant :as tenant]
                [lounge.directory :as dir]
                [lounge.roles]
                [lounge.route :as route]
                [lounge.logging :as log]
                [lounge.setup :as setup]
                [lounge.notifications :as notify]
                [goog.dom]
                [cljsjs.jquery]
                [cljsjs.typedjs]
                [cljsjs.scrollify]
                [firebase-cljs.user :as fbuser]
                [lounge.analytics :as analytics]))

(html
  (head
    (html-meta :charset "utf-8")
    (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1")

    (title "theLounge.io - IT Automation")
    (link :rel "stylesheet" :type "text/css" :href "bower_components/semantic-ui/dist/semantic.css")
    (link :rel "stylesheet" :href "bower_components/animate-css/animate.css")

    ;; Stripe Checkout
    (script :src "https://checkout.stripe.com/checkout.js")
    (style
      "#dash, .centered a > img{
         margin-top: 6em;
       }
       h3.ui.center.header {
         padding: 2em 0em;}
      "))
    (body
      (dash/dash)))

(defn handle-login [user]
  (let [uid (user/uid user)]
    (when @auth/pending-link
      (comp
        (fbuser/link user (:cred @auth/pending-link))
        (reset! auth/pending-link nil)))
    (user/login user)
    (dir/login uid)
    (notify/login uid)
    (tenant/login uid)))

(defn handle-logout []
  (dosync
    (reset! user/user-fb nil)
    (reset! user/user-auth nil)
    (reset! notify/notifications-fb nil)
    (dir/logout)
    (notify/logout)
    (tenant/logout)
    ;(reset! tenant/tenant-fb nil)
    ))

;; Authentication
(with-init!
  (auth/auth-changed
    fb/auth
    #(if % (handle-login %) (handle-logout))))

;; Analytics
(with-init!
  (comp (analytics/ga "create" "UA-78703565-1" "auto")
        (analytics/ga "send" "pageview")))
